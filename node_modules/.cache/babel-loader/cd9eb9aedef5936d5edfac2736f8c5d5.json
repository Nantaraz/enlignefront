{"ast":null,"code":"var _jsxFileName = \"/home/dev/Bureau/mety/enlignefront/src/components/Register.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { registerUser } from '../actions/authentication';\nimport classnames from 'classnames';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      nom: '',\n      prenom: '',\n      email: '',\n      specialite: '',\n      password: '',\n      password_confirm: '',\n      errors: {}\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const user = {\n      nom: this.state.nom,\n      prenom: this.state.prenom,\n      email: this.state.email,\n      specialite: this.state.specialite,\n      password: this.state.password,\n      password_confirm: this.state.password_confirm\n    };\n    this.props.registerUser(user, this.props.history);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push('/');\n    }\n\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push('/');\n    }\n  }\n\n  render() {\n    const errors = this.state.errors;\n    return (// <div className=\"container\" style={{ marginTop: '50px', width: '700px'}}>\n      //     <h2 style={{marginBottom: '40px'}}>Création du compte</h2>\n      //     <form onSubmit={ this.handleSubmit }>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"text\"\n      //             placeholder=\"Nom\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.nom\n      //             })}\n      //             name=\"nom\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.nom }\n      //             />\n      //             {errors.nom && (<div className=\"invalid-feedback\">{errors.nom}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"text\"\n      //             placeholder=\"Prenom\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.prenom\n      //             })}\n      //             name=\"prenom\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.prenom }\n      //             />\n      //             {errors.prenom && (<div className=\"invalid-feedback\">{errors.prenom}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"email\"\n      //             placeholder=\"Email\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.email\n      //             })}\n      //             name=\"email\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.email }\n      //             />\n      //             {errors.email && (<div className=\"invalid-feedback\">{errors.email}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"text\"\n      //             placeholder=\"Spécialité\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.specialite\n      //             })}\n      //             name=\"specialite\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.specialite }\n      //             />\n      //             {errors.specialite && (<div className=\"invalid-feedback\">{errors.specialite}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"password\"\n      //             placeholder=\"Password\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.password\n      //             })}\n      //             name=\"password\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.password }\n      //             />\n      //             {errors.password && (<div className=\"invalid-feedback\">{errors.password}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <input\n      //             type=\"password\"\n      //             placeholder=\"Confirm Password\"\n      //             className={classnames('form-control form-control-lg', {\n      //                 'is-invalid': errors.password_confirm\n      //             })}\n      //             name=\"password_confirm\"\n      //             onChange={ this.handleInputChange }\n      //             value={ this.state.password_confirm }\n      //             />\n      //             {errors.password_confirm && (<div className=\"invalid-feedback\">{errors.password_confirm}</div>)}\n      //         </div>\n      //         <div className=\"form-group\">\n      //             <button type=\"submit\" className=\"btn btn-primary\">\n      //                 S'inscrire\n      //             </button>\n      //         </div>\n      //     </form>\n      // </div>\n      React.createElement(MDBContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(MDBRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        md: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(MDBCard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(MDBCardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"h4 text-center py-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Cr\\xE9er un compte\"), React.createElement(\"div\", {\n        className: \"grey-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(MDBInput, {\n        label: \"Your name\",\n        icon: \"user\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        type: \"text\",\n        label: \"Nom\",\n        className: classnames('form-control form-control-lg', {\n          'is-invalid': errors.nom\n        }),\n        name: \"nom\",\n        onChange: this.handleInputChange,\n        value: this.state.nom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), \" \", errors.nom && React.createElement(\"div\", {\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, errors.nom)), React.createElement(MDBInput, {\n        label: \"Your email\",\n        icon: \"envelope\",\n        group: true,\n        type: \"email\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Confirm your email\",\n        icon: \"exclamation-triangle\",\n        group: true,\n        type: \"text\",\n        validate: true,\n        error: \"wrong\",\n        success: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(MDBInput, {\n        label: \"Your password\",\n        icon: \"lock\",\n        group: true,\n        type: \"password\",\n        validate: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-center py-4 mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(MDBBtn, {\n        color: \"cyan\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"S'inscrire\"))))))))\n    );\n  }\n\n}\n\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["/home/dev/Bureau/mety/enlignefront/src/components/Register.js"],"names":["React","Component","connect","PropTypes","withRouter","registerUser","classnames","MDBContainer","MDBRow","MDBCol","MDBInput","MDBBtn","MDBCard","MDBCardBody","Register","constructor","state","nom","prenom","email","specialite","password","password_confirm","errors","handleInputChange","bind","handleSubmit","e","setState","target","name","value","preventDefault","user","props","history","componentWillReceiveProps","nextProps","auth","isAuthenticated","push","componentDidMount","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,MAAjD,EAAyDC,OAAzD,EAAkEC,WAAlE,QAAqF,UAArF;;AAEA,MAAMC,QAAN,SAAuBb,SAAvB,CAAiC;AAE7Bc,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAE,EADI;AAETC,MAAAA,MAAM,EAAE,EAFC;AAGTC,MAAAA,KAAK,EAAE,EAHE;AAITC,MAAAA,UAAU,EAAE,EAJH;AAKTC,MAAAA,QAAQ,EAAE,EALD;AAMTC,MAAAA,gBAAgB,EAAE,EANT;AAOTC,MAAAA,MAAM,EAAE;AAPC,KAAb;AASA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,iBAAiB,CAACG,CAAD,EAAI;AACjB,SAAKC,QAAL,CAAc;AACV,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AADhB,KAAd;AAGH;;AAEDL,EAAAA,YAAY,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAMC,IAAI,GAAG;AACThB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADP;AAETC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAFV;AAGTC,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,KAHT;AAITC,MAAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWI,UAJd;AAKTC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK,QALZ;AAMTC,MAAAA,gBAAgB,EAAE,KAAKN,KAAL,CAAWM;AANpB,KAAb;AAQA,SAAKY,KAAL,CAAW7B,YAAX,CAAwB4B,IAAxB,EAA8B,KAAKC,KAAL,CAAWC,OAAzC;AACH;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACjC,QAAGA,SAAS,CAACC,IAAV,CAAeC,eAAlB,EAAmC;AAC/B,WAAKL,KAAL,CAAWC,OAAX,CAAmBK,IAAnB,CAAwB,GAAxB;AACH;;AACD,QAAGH,SAAS,CAACd,MAAb,EAAqB;AACjB,WAAKK,QAAL,CAAc;AACVL,QAAAA,MAAM,EAAEc,SAAS,CAACd;AADR,OAAd;AAGH;AACJ;;AAEDkB,EAAAA,iBAAiB,GAAG;AAChB,QAAG,KAAKP,KAAL,CAAWI,IAAX,CAAgBC,eAAnB,EAAoC;AAChC,WAAKL,KAAL,CAAWC,OAAX,CAAmBK,IAAnB,CAAwB,GAAxB;AACH;AACJ;;AAEDE,EAAAA,MAAM,GAAG;AAAA,UACGnB,MADH,GACc,KAAKP,KADnB,CACGO,MADH;AAEL,WACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIR,0BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBA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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { registerUser } from '../actions/authentication';\nimport classnames from 'classnames';\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn, MDBCard, MDBCardBody } from 'mdbreact';\n\nclass Register extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            nom: '',\n            prenom: '',\n            email: '',\n            specialite: '',\n            password: '',\n            password_confirm: '',\n            errors: {}\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const user = {\n            nom: this.state.nom,\n            prenom: this.state.prenom,\n            email: this.state.email,\n            specialite: this.state.specialite,\n            password: this.state.password,\n            password_confirm: this.state.password_confirm\n        }\n        this.props.registerUser(user, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.auth.isAuthenticated) {\n            this.props.history.push('/')\n        }\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    componentDidMount() {\n        if(this.props.auth.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    render() {\n        const { errors } = this.state;\n        return(\n        // <div className=\"container\" style={{ marginTop: '50px', width: '700px'}}>\n        //     <h2 style={{marginBottom: '40px'}}>Création du compte</h2>\n        //     <form onSubmit={ this.handleSubmit }>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"text\"\n        //             placeholder=\"Nom\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.nom\n        //             })}\n        //             name=\"nom\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.nom }\n        //             />\n        //             {errors.nom && (<div className=\"invalid-feedback\">{errors.nom}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"text\"\n        //             placeholder=\"Prenom\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.prenom\n        //             })}\n        //             name=\"prenom\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.prenom }\n        //             />\n        //             {errors.prenom && (<div className=\"invalid-feedback\">{errors.prenom}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"email\"\n        //             placeholder=\"Email\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.email\n        //             })}\n        //             name=\"email\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.email }\n        //             />\n        //             {errors.email && (<div className=\"invalid-feedback\">{errors.email}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"text\"\n        //             placeholder=\"Spécialité\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.specialite\n        //             })}\n        //             name=\"specialite\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.specialite }\n        //             />\n        //             {errors.specialite && (<div className=\"invalid-feedback\">{errors.specialite}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"password\"\n        //             placeholder=\"Password\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.password\n        //             })}\n        //             name=\"password\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.password }\n        //             />\n        //             {errors.password && (<div className=\"invalid-feedback\">{errors.password}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <input\n        //             type=\"password\"\n        //             placeholder=\"Confirm Password\"\n        //             className={classnames('form-control form-control-lg', {\n        //                 'is-invalid': errors.password_confirm\n        //             })}\n        //             name=\"password_confirm\"\n        //             onChange={ this.handleInputChange }\n        //             value={ this.state.password_confirm }\n        //             />\n        //             {errors.password_confirm && (<div className=\"invalid-feedback\">{errors.password_confirm}</div>)}\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <button type=\"submit\" className=\"btn btn-primary\">\n        //                 S'inscrire\n        //             </button>\n        //         </div>\n        //     </form>\n        // </div>\n\n\n\n<MDBContainer>\n<MDBRow>\n  <MDBCol md=\"6\">\n    <MDBCard>\n      <MDBCardBody>\n        <form onSubmit={ this.handleSubmit }>\n          <p className=\"h4 text-center py-4\">Créer un compte</p>\n          <div className=\"grey-text\">\n          <div className=\"form-group\">\n            <MDBInput\n              label=\"Your name\"\n              icon=\"user\"\n              group\n              type=\"text\"\n              validate\n              error=\"wrong\"\n              success=\"right\"\n\n\n\n              type=\"text\"\n              label=\"Nom\"\n              className={classnames('form-control form-control-lg', {\n                  'is-invalid': errors.nom\n              })}\n              name=\"nom\"\n              onChange={ this.handleInputChange }\n              value={ this.state.nom }\n            /> {errors.nom && (<div className=\"invalid-feedback\">{errors.nom}</div>)}\n            </div>\n            <MDBInput\n              label=\"Your email\"\n              icon=\"envelope\"\n              group\n              type=\"email\"\n              validate\n              error=\"wrong\"\n              success=\"right\"\n            />\n            <MDBInput\n              label=\"Confirm your email\"\n              icon=\"exclamation-triangle\"\n              group\n              type=\"text\"\n              validate\n              error=\"wrong\"\n              success=\"right\"\n            />\n            <MDBInput\n              label=\"Your password\"\n              icon=\"lock\"\n              group\n              type=\"password\"\n              validate\n            />\n          </div>\n          <div className=\"text-center py-4 mt-3\">\n            <MDBBtn color=\"cyan\" type=\"submit\">\n              S'inscrire\n            </MDBBtn>\n          </div>\n        </form>\n      </MDBCardBody>\n    </MDBCard>\n  </MDBCol>\n</MDBRow>\n</MDBContainer>\n\n\n\n\n\n\n        )\n    }\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps,{ registerUser })(withRouter(Register))"]},"metadata":{},"sourceType":"module"}